#!/bin/bash

# check permission
if [ `id -u` != '0' ]; then
  echo 'Error: You must be root to run this script'
  exit 1
fi

# config
dir=$(cd `dirname $0`; pwd)
installation_path='/usr/local'
# version_epel='7-9'
version_ruby='2.4.2'
version_passenger='5.1.8'
version_nginx='1.12.1'
version_php='7.1.10'
version_docker_compose='1.16.1'
version_node='6.11.4'
version_mongodb='3.4.9'
version_python3='3.6.3'
user_http='www'
user_git='git'

# installer
function installer() {
  wget -c $3
  tar zxvf $2
  mv $1 $4
}

# source installer
function sourceInstaller() {
  wget -c $3
  tar zxvf $2
  cd $1
  ./configure $4
  make && make install
  $5
  cd ..
  rm -rf $1 $2
}

# go to root directory
cd

# echo '================== hostname =================='
# hostnamectl set-hostname ${user_http}

echo '================== add repo && install tools && update && upgrade =================='
# yum -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-${version_epel}.noarch.rpm
yum -y install epel-release yum-utils
yum-config-manager --enable epel
yum -y update
yum -y upgrade
yum -y install autoconf bash-completion make cmake gcc gcc-c++ gcc-g77 redhat-lsb net-tools ntp wget curl zip unzip vim* emacs libcap diffutils ca-certificates psmisc libtool-libs file flex bison patch bzip2-devel c-ares-devel curl-devel e2fsprogs-devel gd-devel gettext-devel glib2-devel gmp-devel kernel-devel krb5-devel libc-client-devel libcurl-devel libevent-devel libicu-devel libidn-devel libjpeg-devel libmcrypt-devel libpng-devel libxml2-devel libXpm-devel libxslt-devel lrzsz ncurses-devel openssl-devel pcre-devel zlib-devel ImageMagick-devel subversion git mariadb mariadb-devel re2c
# yum -y install php-cli php-fpm php-bcmath php-gd php-imap php-intl php-mbstring php-mcrypt php-mysql php-pgsql php-xml php-pclzip php-pecl-apcu php-pecl-imagick php-pecl-memcache php-pecl-memcached php-pecl-sphinx
# yum -y install ftp golang mariadb-server nodejs npm pptpd ruby siege sqlite-devel vsftpd
yum clean all

echo "================== ${user_http} =================="
useradd ${user_http}
# chcon -Rt httpd_sys_rw_content_t /home/${user_http}

# echo '================== vsftpd =================='
# cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.sample
# cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.sample
# sed -i 's/anonymous_enable=YES/anonymous_enable=NO/g' /etc/vsftpd/vsftpd.conf
# sed -i 's/#anon_upload_enable=YES/anon_upload_enable=YES/g' /etc/vsftpd/vsftpd.conf
# sed -i 's/#anon_mkdir_write_enable=YES/anon_mkdir_write_enable=YES/g' /etc/vsftpd/vsftpd.conf
# sed -i 's/#chroot_local_user=YES/chroot_local_user=YES/g' /etc/vsftpd/vsftpd.conf
# sed -i 's/listen=NO/listen=YES/g' /etc/vsftpd/vsftpd.conf
# sed -i 's/listen_ipv6=YES/#listen_ipv6=YES/g' /etc/vsftpd/vsftpd.conf
# echo 'anon_umask=002' >> /etc/vsftpd/vsftpd.conf
# echo 'anon_other_write_enable=YES' >> /etc/vsftpd/vsftpd.conf
# echo 'allow_writeable_chroot=YES' >> /etc/vsftpd/vsftpd.conf
# echo 'guest_enable=YES' >> /etc/vsftpd/vsftpd.conf
# echo 'guest_username=ftp' >> /etc/vsftpd/vsftpd.conf
# echo 'auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser' > /etc/pam.d/vsftpd
# echo 'account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser' >> /etc/pam.d/vsftpd
# echo '#db_load -Tt hash -f /etc/vsftpd/vuser.conf /etc/vsftpd/vuser.db' > /etc/vsftpd/vuser.conf
# chown ftp:ftp -R /var/ftp
# setsebool -P ftp_home_dir=1 ftpd_full_access=1

echo '================== ruby =================='
name="ruby-${version_ruby}"
tar="${name}.tar.gz"
path="${installation_path}/ruby"
sourceInstaller ${name} ${tar} https://cache.ruby-lang.org/pub/ruby/${version_ruby%.*}/${tar} " --prefix=${path}"
${path}/bin/gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/
${path}/bin/gem update --system
${path}/bin/gem install rails
# echo "export PATH=${path}/bin:"'$PATH' > /etc/profile.d/ruby.sh
# source /etc/profile.d/ruby.sh

echo '================== passenger =================='
name="passenger-${version_passenger}"
tar="${name}.tar.gz"
path="${installation_path}/passenger"
installer ${name} ${tar} http://s3.amazonaws.com/phusion-passenger/releases/${tar} ${path}
# echo "export PATH=${path}/bin:"'$PATH' > /etc/profile.d/passenger.sh
# source /etc/profile.d/passenger.sh
passenger_nginx_addon_dir=$($path/bin/passenger-config --nginx-addon-dir)

echo '================== nginx =================='
name="nginx-${version_nginx}"
tar="${name}.tar.gz"
path="${installation_path}/nginx"
sourceInstaller ${name} ${tar} http://nginx.org/download/${tar} " --prefix=${path} --user=${user_http} --group=${user_http} --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_ssl_module --with-http_stub_status_module --with-http_xslt_module=dynamic --with-mail=dynamic --with-stream=dynamic --with-compat --add-dynamic-module=${passenger_nginx_addon_dir}"
# echo "export PATH=${path}/sbin:"'$PATH' > /etc/profile.d/nginx.sh
# source /etc/profile.d/nginx.sh
# setsebool -P httpd_can_network_connect=1
# wget -c https://github.com/xiewulong/nginx/raw/master/www.service.sample
# mv www.service.sample /usr/lib/systemd/system/www.service

echo '================== php =================='
name="php-${version_php}"
tar="${name}.tar.gz"
path="${installation_path}/php"
sourceInstaller ${name} ${tar} http://cn2.php.net/distributions/${tar} " --prefix=${path} --with-config-file-path=${path}/etc --enable-fpm --with-fpm-user=${user_http} --with-fpm-group=${user_http} --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=${installation_path}/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --enable-opcache --with-xsl" "cp php.ini-development php.ini-production ${path}/etc/"
# echo "export PATH=${path}/sbin:${path}/bin:"'$PATH' > /etc/profile.d/php.sh
# source /etc/profile.d/php.sh
cp ${path}/etc/php-fpm.conf.default ${path}/etc/php-fpm.conf
cp ${path}/etc/php.ini-production ${path}/etc/php.ini
cp ${path}/etc/php-fpm.d/www.conf.default ${path}/etc/php-fpm.d/www.conf
sed -i 's/short_open_tag =.*/short_open_tag = On/g' ${path}/etc/php.ini
sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' ${path}/etc/php.ini
sed -i 's/expose_php =.*/expose_php = Off/g' ${path}/etc/php.ini
sed -i 's/post_max_size =.*/post_max_size = 60M/g' ${path}/etc/php.ini
sed -i 's/upload_max_filesize =.*/upload_max_filesize = 60M/g' ${path}/etc/php.ini
sed -i 's/max_execution_time =.*/max_execution_time = 120/g' ${path}/etc/php.ini
sed -i 's/;date.timezone =.*/date.timezone = PRC/g' ${path}/etc/php.ini
pear config-set php_ini ${path}/etc/php.ini
pecl config-set php_ini ${path}/etc/php.ini
# pecl install apcu imagick memcache memcached swoole
# mkdir -p /var/lib/php/session
# chown ${user_http}:${user_http} /var/lib/php/session
wget -c https://github.com/xiewulong/deploy/raw/master/systemd/php-fpm.service
mv php-fpm.service /usr/lib/systemd/system/

echo '================== composer =================='
curl -sS https://getcomposer.org/installer | php -- --install-dir=${installation_path}/bin --filename=composer
# composer global require 'fxp/composer-asset-plugin:~1.2.0'

# echo '================== docker =================='
# curl -fsSL https://get.docker.com/ | sh
# sed -i "s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=https://ugdzo2pp.mirror.aliyuncs.com|g" /lib/systemd/system/docker.service
# usermod -aG docker username

# echo '================== docker-compose =================='
# curl -L https://github.com/docker/compose/releases/download/${version_docker_compose}/docker-compose-`uname -s`-`uname -m` > ${installation_path}/bin/docker-compose
# chmod +x ${installation_path}/bin/docker-compose

# echo '================== node =================='
# name="node-v${version_node}"
# tar="${name}.tar.gz"
# path="${installation_path}/node"
# installer ${name} ${name}-linux-x64.tar.xz https://nodejs.org/dist/v${version_node}/${name}-linux-x64.tar.xz ${path}
# sourceInstaller ${name} ${tar} https://nodejs.org/dist/v${version_node}/${tar} " --prefix=${path}"
# echo "export PATH=${path}/bin:"'$PATH' > /etc/profile.d/node.sh
# source /etc/profile.d/node.sh
# ${path}/bin/npm install -g --registry=https://registry.npm.taobao.org cnpm
# ${path}/bin/cnpm install -g pm2 yarn

# echo '================== mongodb =================='
# name="mongodb-linux-x86_64-rhel70-${version_mongodb}"
# tar="${name}.tgz"
# path="${installation_path}/mongodb"
# installer ${name} ${tar} https://fastdl.mongodb.org/linux/${tar} ${path}
# echo "export PATH=${path}/bin:"'$PATH' > /etc/profile.d/mongodb.sh
# source /etc/profile.d/mongodb.sh

# echo '================== python 3 =================='
# name="Python-${version_python3}"
# tar="${name}.tgz"
# path="${installation_path}/python3"
# sourceInstaller ${name} ${tar} https://www.python.org/ftp/python/${version_python3}/${tar} " --prefix=${path}"
# ln -sf ${path}/bin/pydoc3 ${installation_path}/bin/pydoc3
# ln -sf ${path}/bin/python3 ${installation_path}/bin/python3

# echo '================== git =================='
# useradd -s /bin/git-shell ${user_git}
# mkdir -m 700 /home/${user_git}/.ssh
# touch /home/${user_git}/.ssh/authorized_keys
# chmod 600 /home/${user_git}/.ssh/authorized_keys
# chown git:git -R /home/${user_git}/.ssh

echo '================== config =================='
# systemctl enable vsftpd
# systemctl start vsftpd
# systemctl enable www
# systemctl start www
systemctl enable php-fpm
systemctl start php-fpm
# systemctl enable docker
# systemctl start docker
# systemctl enable pptpd
# systemctl start pptpd
# systemctl enable firewalld
# systemctl start firewalld

# echo '================== pptpd =================='
# echo 'localip 192.168.192.168' >> /etc/pptpd.conf
# echo 'remoteip 192.168.192.68-167' >> /etc/pptpd.conf
# echo 'logfile /var/log/pptpd.log' >> /etc/ppp/options.pptpd
# echo 'ms-dns 8.8.8.8' >> /etc/ppp/options.pptpd
# echo 'ms-dns 8.8.4.4' >> /etc/ppp/options.pptpd
# echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
# sysctl -p
# firewall-cmd --permanent --add-port=1723/tcp
# firewall-cmd --permanent --add-masquerade
# firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p gre -j ACCEPT
# firewall-cmd --reload
# systemctl restart pptpd

# back
cd ${dir}
